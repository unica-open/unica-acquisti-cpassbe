/*-
 * ========================LICENSE_START=================================
 * CPASS BackEnd - EJB submodule
 * %%
 * Copyright (C) 2019 - 2025 CSI Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/**
 * WSProgrammi
 * Servizio di pubblicazione programmazione lavori, beni e servizi
 *
 * OpenAPI spec version: 2.1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package it.csi.cpass.cpassbe.mit.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.Call;

import it.csi.cpass.cpassbe.lib.util.log.LogUtil;
import it.csi.cpass.cpassbe.mit.client.ApiCallback;
import it.csi.cpass.cpassbe.mit.client.ApiClient;
import it.csi.cpass.cpassbe.mit.client.ApiException;
import it.csi.cpass.cpassbe.mit.client.ApiResponse;
import it.csi.cpass.cpassbe.mit.client.Configuration;
import it.csi.cpass.cpassbe.mit.client.Pair;
import it.csi.cpass.cpassbe.mit.client.ProgressRequestBody;
import it.csi.cpass.cpassbe.mit.client.ProgressResponseBody;
import it.csi.cpass.cpassbe.mit.client.model.programmi.DettaglioFornitureServiziResult;
import it.csi.cpass.cpassbe.mit.client.model.programmi.DettaglioLavoriResult;
import it.csi.cpass.cpassbe.mit.client.model.programmi.InputStream;
import it.csi.cpass.cpassbe.mit.client.model.programmi.PubblicaProgrammaDM112011Entry;
import it.csi.cpass.cpassbe.mit.client.model.programmi.PubblicaProgrammaFornitureServiziEntry;
import it.csi.cpass.cpassbe.mit.client.model.programmi.PubblicaProgrammaLavoriEntry;
import it.csi.cpass.cpassbe.mit.client.model.programmi.PubblicazioneResult;

public class ProgrammiApi {
	protected final LogUtil log = new LogUtil(getClass());
	private ApiClient apiClient;

	public ProgrammiApi() {
		this(Configuration.getDefaultApiClient());
	}

	public ProgrammiApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/* Build call for programmiRestServiceDettaglioFornitureServizi */
	private com.squareup.okhttp.Call programmiRestServiceDettaglioFornitureServiziCall(Long idRicevuto, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = null;

		// verify the required parameter 'idRicevuto' is set
		if (idRicevuto == null) {
			throw new ApiException("Missing the required parameter 'idRicevuto' when calling programmiRestServiceDettaglioFornitureServizi(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServiceDettaglioFornitureServizi(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/DettaglioFornitureServizi".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (idRicevuto != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "idRicevuto", idRicevuto));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * Estrae il dettaglio di un programma di forniture e servizi in base all&#39;id passato come parametro
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @return DettaglioFornitureServiziResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public DettaglioFornitureServiziResult programmiRestServiceDettaglioFornitureServizi(Long idRicevuto, String token) throws ApiException {
		final ApiResponse<DettaglioFornitureServiziResult> resp = programmiRestServiceDettaglioFornitureServiziWithHttpInfo(idRicevuto, token);
		return resp.getData();
	}

	/**
	 * Estrae il dettaglio di un programma di forniture e servizi in base all&#39;id passato come parametro
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;DettaglioFornitureServiziResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<DettaglioFornitureServiziResult> programmiRestServiceDettaglioFornitureServiziWithHttpInfo(Long idRicevuto, String token) throws ApiException {
		final com.squareup.okhttp.Call call = programmiRestServiceDettaglioFornitureServiziCall(idRicevuto, token, null, null);
		final Type localVarReturnType = new TypeToken<DettaglioFornitureServiziResult>(){}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Estrae il dettaglio di un programma di forniture e servizi in base all&#39;id passato come parametro (asynchronously)
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServiceDettaglioFornitureServiziAsync(Long idRicevuto, String token, final ApiCallback<DettaglioFornitureServiziResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServiceDettaglioFornitureServiziCall(idRicevuto, token, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<DettaglioFornitureServiziResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
	/* Build call for programmiRestServiceDettaglioLavori */
	private com.squareup.okhttp.Call programmiRestServiceDettaglioLavoriCall(Long idRicevuto, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = null;

		// verify the required parameter 'idRicevuto' is set
		if (idRicevuto == null) {
			throw new ApiException("Missing the required parameter 'idRicevuto' when calling programmiRestServiceDettaglioLavori(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServiceDettaglioLavori(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/DettaglioLavori".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (idRicevuto != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "idRicevuto", idRicevuto));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * Estrae il dettaglio di un programma di lavori in base all&#39;id passato come parametro
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @return DettaglioLavoriResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public DettaglioLavoriResult programmiRestServiceDettaglioLavori(Long idRicevuto, String token) throws ApiException {
		final ApiResponse<DettaglioLavoriResult> resp = programmiRestServiceDettaglioLavoriWithHttpInfo(idRicevuto, token);
		return resp.getData();
	}

	/**
	 * Estrae il dettaglio di un programma di lavori in base all&#39;id passato come parametro
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;DettaglioLavoriResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<DettaglioLavoriResult> programmiRestServiceDettaglioLavoriWithHttpInfo(Long idRicevuto, String token) throws ApiException {
		final com.squareup.okhttp.Call call = programmiRestServiceDettaglioLavoriCall(idRicevuto, token, null, null);
		final Type localVarReturnType = new TypeToken<DettaglioLavoriResult>(){}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Estrae il dettaglio di un programma di lavori in base all&#39;id passato come parametro (asynchronously)
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServiceDettaglioLavoriAsync(Long idRicevuto, String token, final ApiCallback<DettaglioLavoriResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServiceDettaglioLavoriCall(idRicevuto, token, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<DettaglioLavoriResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
	/* Build call for programmiRestServicePubblicaDM112011 */
	private com.squareup.okhttp.Call programmiRestServicePubblicaDM112011Call(PubblicaProgrammaDM112011Entry body, String modalitaInvio, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = body;

		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling programmiRestServicePubblicaDM112011(Async)");
		}

		// verify the required parameter 'modalitaInvio' is set
		if (modalitaInvio == null) {
			throw new ApiException("Missing the required parameter 'modalitaInvio' when calling programmiRestServicePubblicaDM112011(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServicePubblicaDM112011(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/PubblicaDM112011".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (modalitaInvio != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "modalitaInvio", modalitaInvio));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
				"application/json"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * [Deprecato] Pubblica i dati e i documenti relativi ad un programma DM 11/2011
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaDM112011Entry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @return PubblicazioneResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public PubblicazioneResult programmiRestServicePubblicaDM112011(PubblicaProgrammaDM112011Entry body, String modalitaInvio, String token) throws ApiException {
		final ApiResponse<PubblicazioneResult> resp = programmiRestServicePubblicaDM112011WithHttpInfo(body, modalitaInvio, token);
		return resp.getData();
	}

	/**
	 * [Deprecato] Pubblica i dati e i documenti relativi ad un programma DM 11/2011
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaDM112011Entry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;PubblicazioneResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<PubblicazioneResult> programmiRestServicePubblicaDM112011WithHttpInfo(PubblicaProgrammaDM112011Entry body, String modalitaInvio, String token) throws ApiException {
		final com.squareup.okhttp.Call call = programmiRestServicePubblicaDM112011Call(body, modalitaInvio, token, null, null);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * [Deprecato] Pubblica i dati e i documenti relativi ad un programma DM 11/2011 (asynchronously)
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaDM112011Entry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServicePubblicaDM112011Async(PubblicaProgrammaDM112011Entry body, String modalitaInvio, String token, final ApiCallback<PubblicazioneResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServicePubblicaDM112011Call(body, modalitaInvio, token, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
	/* Build call for programmiRestServicePubblicaFornitureServizi */
	private com.squareup.okhttp.Call programmiRestServicePubblicaFornitureServiziCall(PubblicaProgrammaFornitureServiziEntry body, String modalitaInvio, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "START");
		final Object localVarPostBody = body;

		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling programmiRestServicePubblicaFornitureServizi(Async)");
		}

		// verify the required parameter 'modalitaInvio' is set
		if (modalitaInvio == null) {
			throw new ApiException("Missing the required parameter 'modalitaInvio' when calling programmiRestServicePubblicaFornitureServizi(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServicePubblicaFornitureServizi(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/PubblicaFornitureServizi".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (modalitaInvio != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "modalitaInvio", modalitaInvio));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
				"application/json"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "prima del apiClient.buildCall");
		final String[] localVarAuthNames = new String[] {  };
		final Call ris = apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "STOP");
		return ris;
	}

	/**
	 * Pubblica i dati e i documenti relativi ad un programma di forniture e servizi
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaFornitureServiziEntry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @return PubblicazioneResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public PubblicazioneResult programmiRestServicePubblicaFornitureServizi(PubblicaProgrammaFornitureServiziEntry body, String modalitaInvio, String token) throws ApiException {
		log.info("programmiRestServicePubblicaFornitureServizi", "START");
		final ApiResponse<PubblicazioneResult> resp = programmiRestServicePubblicaFornitureServiziWithHttpInfo(body, modalitaInvio, token);
		log.info("programmiRestServicePubblicaFornitureServizi", "STOP");
		return resp.getData();
	}

	/**
	 * Pubblica i dati e i documenti relativi ad un programma di forniture e servizi
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaFornitureServiziEntry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;PubblicazioneResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<PubblicazioneResult> programmiRestServicePubblicaFornitureServiziWithHttpInfo(PubblicaProgrammaFornitureServiziEntry body, String modalitaInvio, String token) throws ApiException {
		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "START");
		final com.squareup.okhttp.Call call = programmiRestServicePubblicaFornitureServiziCall(body, modalitaInvio, token, null, null);
		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "dopo call");
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "prima execute");
		final ApiResponse<PubblicazioneResult> ris = apiClient.execute(call, localVarReturnType);
		log.info("programmiRestServicePubblicaFornitureServiziWithHttpInfo", "STOP");
		return ris;
	}

	/**
	 * Pubblica i dati e i documenti relativi ad un programma di forniture e servizi (asynchronously)
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaFornitureServiziEntry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServicePubblicaFornitureServiziAsync(PubblicaProgrammaFornitureServiziEntry body, String modalitaInvio, String token, final ApiCallback<PubblicazioneResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServicePubblicaFornitureServiziCall(body, modalitaInvio, token, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
	/* Build call for programmiRestServicePubblicaLavori */
	private com.squareup.okhttp.Call programmiRestServicePubblicaLavoriCall(PubblicaProgrammaLavoriEntry body, String modalitaInvio, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = body;

		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling programmiRestServicePubblicaLavori(Async)");
		}

		// verify the required parameter 'modalitaInvio' is set
		if (modalitaInvio == null) {
			throw new ApiException("Missing the required parameter 'modalitaInvio' when calling programmiRestServicePubblicaLavori(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServicePubblicaLavori(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/PubblicaLavori".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (modalitaInvio != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "modalitaInvio", modalitaInvio));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
				"application/json"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * Pubblica i dati e i documenti relativi ad un programma di lavori
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaLavoriEntry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @return PubblicazioneResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public PubblicazioneResult programmiRestServicePubblicaLavori(PubblicaProgrammaLavoriEntry body, String modalitaInvio, String token) throws ApiException {
		final ApiResponse<PubblicazioneResult> resp = programmiRestServicePubblicaLavoriWithHttpInfo(body, modalitaInvio, token);
		return resp.getData();
	}

	/**
	 * Pubblica i dati e i documenti relativi ad un programma di lavori
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaLavoriEntry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;PubblicazioneResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<PubblicazioneResult> programmiRestServicePubblicaLavoriWithHttpInfo(PubblicaProgrammaLavoriEntry body, String modalitaInvio, String token) throws ApiException {
		final com.squareup.okhttp.Call call = programmiRestServicePubblicaLavoriCall(body, modalitaInvio, token, null, null);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Pubblica i dati e i documenti relativi ad un programma di lavori (asynchronously)
	 * Ritorna il risultato della pubblicazione e l&#39;id assegnato dal sistema, che dovr� essere riutilizzato per successive pubblicazioni
	 * @param body Programma da pubblicare [Model&#x3D;PubblicaProgrammaLavoriEntry] (required)
	 * @param modalitaInvio Se valorizzato a &#39;1&#39; effettua solo il controllo dei dati, &#39;2&#39; effettua controllo e pubblicazione (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServicePubblicaLavoriAsync(PubblicaProgrammaLavoriEntry body, String modalitaInvio, String token, final ApiCallback<PubblicazioneResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServicePubblicaLavoriCall(body, modalitaInvio, token, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
	/* Build call for programmiRestServicePubblicaPdf */
	private com.squareup.okhttp.Call programmiRestServicePubblicaPdfCall(Long idRicevuto, InputStream body, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = body;

		// verify the required parameter 'idRicevuto' is set
		if (idRicevuto == null) {
			throw new ApiException("Missing the required parameter 'idRicevuto' when calling programmiRestServicePubblicaPdf(Async)");
		}

		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling programmiRestServicePubblicaPdf(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServicePubblicaPdf(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/PubblicaPdf".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (idRicevuto != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "idRicevuto", idRicevuto));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
				"multipart/form-data"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * [Deprecato] Inserisce il documento pdf del programma
	 * Ritorna l&#39;esito dell&#39;inserimento
	 * @param idRicevuto Id univoco generato dal sistema per il programma pubblicato (required)
	 * @param body File pdf del programma (required)
	 * @param token Token (required)
	 * @return PubblicazioneResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public PubblicazioneResult programmiRestServicePubblicaPdf(Long idRicevuto, InputStream body, String token) throws ApiException {
		final ApiResponse<PubblicazioneResult> resp = programmiRestServicePubblicaPdfWithHttpInfo(idRicevuto, body, token);
		return resp.getData();
	}

	/**
	 * [Deprecato] Inserisce il documento pdf del programma
	 * Ritorna l&#39;esito dell&#39;inserimento
	 * @param idRicevuto Id univoco generato dal sistema per il programma pubblicato (required)
	 * @param body File pdf del programma (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;PubblicazioneResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<PubblicazioneResult> programmiRestServicePubblicaPdfWithHttpInfo(Long idRicevuto, InputStream body, String token) throws ApiException {
		final com.squareup.okhttp.Call call = programmiRestServicePubblicaPdfCall(idRicevuto, body, token, null, null);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * [Deprecato] Inserisce il documento pdf del programma (asynchronously)
	 * Ritorna l&#39;esito dell&#39;inserimento
	 * @param idRicevuto Id univoco generato dal sistema per il programma pubblicato (required)
	 * @param body File pdf del programma (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServicePubblicaPdfAsync(Long idRicevuto, InputStream body, String token, final ApiCallback<PubblicazioneResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServicePubblicaPdfCall(idRicevuto, body, token, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<PubblicazioneResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
	/* Build call for programmiRestServiceScaricaPdf */
	private com.squareup.okhttp.Call programmiRestServiceScaricaPdfCall(Long idRicevuto, String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = null;

		// verify the required parameter 'idRicevuto' is set
		if (idRicevuto == null) {
			throw new ApiException("Missing the required parameter 'idRicevuto' when calling programmiRestServiceScaricaPdf(Async)");
		}

		// verify the required parameter 'token' is set
		if (token == null) {
			throw new ApiException("Missing the required parameter 'token' when calling programmiRestServiceScaricaPdf(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Programmi/ScaricaPdf".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();
		if (idRicevuto != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "idRicevuto", idRicevuto));
		}
		if (token != null) {
			localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
		}

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();

		final String[] localVarAccepts = {
				"application/octet-stream"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
				"application/x-www-form-urlencoded"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * Effettua il download del pdf relativo al programma
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public void programmiRestServiceScaricaPdf(Long idRicevuto, String token) throws ApiException {
		programmiRestServiceScaricaPdfWithHttpInfo(idRicevuto, token);
	}

	/**
	 * Effettua il download del pdf relativo al programma
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<Void> programmiRestServiceScaricaPdfWithHttpInfo(Long idRicevuto, String token) throws ApiException {
		final com.squareup.okhttp.Call call = programmiRestServiceScaricaPdfCall(idRicevuto, token, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Effettua il download del pdf relativo al programma (asynchronously)
	 *
	 * @param idRicevuto Identificativo univoco SCP - IdRicevuto (required)
	 * @param token Token (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call programmiRestServiceScaricaPdfAsync(Long idRicevuto, String token, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = programmiRestServiceScaricaPdfCall(idRicevuto, token, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
