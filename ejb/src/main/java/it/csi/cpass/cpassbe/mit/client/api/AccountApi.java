/*-
 * ========================LICENSE_START=================================
 * CPASS BackEnd - EJB submodule
 * %%
 * Copyright (C) 2019 - 2025 CSI Piemonte
 * %%
 * SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
 * SPDX-License-Identifier: EUPL-1.2
 * =========================LICENSE_END==================================
 */
/**
 * WSLogin
 * Servizio di Login e utilizzo JWT
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package it.csi.cpass.cpassbe.mit.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import it.csi.cpass.cpassbe.mit.client.ApiCallback;
import it.csi.cpass.cpassbe.mit.client.ApiClient;
import it.csi.cpass.cpassbe.mit.client.ApiException;
import it.csi.cpass.cpassbe.mit.client.ApiResponse;
import it.csi.cpass.cpassbe.mit.client.Configuration;
import it.csi.cpass.cpassbe.mit.client.Pair;
import it.csi.cpass.cpassbe.mit.client.ProgressRequestBody;
import it.csi.cpass.cpassbe.mit.client.ProgressResponseBody;
import it.csi.cpass.cpassbe.mit.client.model.login.LoginResult;

public class AccountApi {
	private ApiClient apiClient;

	public AccountApi() {
		this(Configuration.getDefaultApiClient());
	}

	public AccountApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/* Build call for accountRestServiceLoginPubblica */
	private com.squareup.okhttp.Call accountRestServiceLoginPubblicaCall(String username, String password, String clientKey, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		final Object localVarPostBody = null;

		// verify the required parameter 'username' is set
		if (username == null) {
			throw new ApiException("Missing the required parameter 'username' when calling accountRestServiceLoginPubblica(Async)");
		}

		// verify the required parameter 'password' is set
		if (password == null) {
			throw new ApiException("Missing the required parameter 'password' when calling accountRestServiceLoginPubblica(Async)");
		}

		// verify the required parameter 'clientKey' is set
		if (clientKey == null) {
			throw new ApiException("Missing the required parameter 'clientKey' when calling accountRestServiceLoginPubblica(Async)");
		}

		// verify the required parameter 'clientId' is set
		if (clientId == null) {
			throw new ApiException("Missing the required parameter 'clientId' when calling accountRestServiceLoginPubblica(Async)");
		}


		// create path and map variables
		final String localVarPath = "/Account/LoginPubblica".replaceAll("\\{format\\}","json");

		final List<Pair> localVarQueryParams = new ArrayList<>();

		final Map<String, String> localVarHeaderParams = new HashMap<>();

		final Map<String, Object> localVarFormParams = new HashMap<>();
		if (username != null) {
			localVarFormParams.put("username", username);
		}
		if (password != null) {
			localVarFormParams.put("password", password);
		}
		if (clientKey != null) {
			localVarFormParams.put("clientKey", clientKey);
		}
		if (clientId != null) {
			localVarFormParams.put("clientId", clientId);
		}

		final String[] localVarAccepts = {
				"application/json"
		};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null) {
			localVarHeaderParams.put("Accept", localVarAccept);
		}

		final String[] localVarContentTypes = {
				"application/x-www-form-urlencoded"
		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if(progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
					final com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener))
							.build();
				}
			});
		}

		final String[] localVarAuthNames = new String[] {  };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	/**
	 * Verifica le credenziali per l&#39;accesso al servizio di pubblicazione
	 * Ritorna l&#39;esito della verifica delle credenziali
	 * @param username Username utente (required)
	 * @param password Password utente (required)
	 * @param clientKey Client/Application key (required)
	 * @param clientId Client/Application Id (required)
	 * @return LoginResult
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public LoginResult accountRestServiceLoginPubblica(String username, String password, String clientKey, String clientId) throws ApiException {
		final ApiResponse<LoginResult> resp = accountRestServiceLoginPubblicaWithHttpInfo(username, password, clientKey, clientId);
		return resp.getData();
	}

	/**
	 * Verifica le credenziali per l&#39;accesso al servizio di pubblicazione
	 * Ritorna l&#39;esito della verifica delle credenziali
	 * @param username Username utente (required)
	 * @param password Password utente (required)
	 * @param clientKey Client/Application key (required)
	 * @param clientId Client/Application Id (required)
	 * @return ApiResponse&lt;LoginResult&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
	 */
	public ApiResponse<LoginResult> accountRestServiceLoginPubblicaWithHttpInfo(String username, String password, String clientKey, String clientId) throws ApiException {
		final com.squareup.okhttp.Call call = accountRestServiceLoginPubblicaCall(username, password, clientKey, clientId, null, null);
		final Type localVarReturnType = new TypeToken<LoginResult>(){}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Verifica le credenziali per l&#39;accesso al servizio di pubblicazione (asynchronously)
	 * Ritorna l&#39;esito della verifica delle credenziali
	 * @param username Username utente (required)
	 * @param password Password utente (required)
	 * @param clientKey Client/Application key (required)
	 * @param clientId Client/Application Id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the request body object
	 */
	public com.squareup.okhttp.Call accountRestServiceLoginPubblicaAsync(String username, String password, String clientKey, String clientId, final ApiCallback<LoginResult> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		final com.squareup.okhttp.Call call = accountRestServiceLoginPubblicaCall(username, password, clientKey, clientId, progressListener, progressRequestListener);
		final Type localVarReturnType = new TypeToken<LoginResult>(){}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
